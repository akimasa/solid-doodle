# Appveyor configuration template for Rust using rustup for Rust installation
# https://github.com/starkat99/appveyor-rust

## Operating System (VM environment) ##

# Rust needs at least Visual Studio 2013 Appveyor OS for MSVC targets.
os: Visual Studio 2015

## Build Matrix ##

# This configuration will setup a build for each channel & target combination (12 windows
# combinations in all).
#
# There are 3 channels: stable, beta, and nightly.
#
# Alternatively, the full version may be specified for the channel to build using that specific
# version (e.g. channel: 1.5.0)
#
# The values for target are the set of windows Rust build targets. Each value is of the form
#
# ARCH-pc-windows-TOOLCHAIN
#
# Where ARCH is the target architecture, either x86_64 or i686, and TOOLCHAIN is the linker
# toolchain to use, either msvc or gnu. See https://www.rust-lang.org/downloads.html#win-foot for
# a description of the toolchain differences.
# See https://github.com/rust-lang-nursery/rustup.rs/#toolchain-specification for description of
# toolchains and host triples.
#
# Comment out channel/target combos you do not wish to build in CI.
#
# You may use the `cargoflags` and `RUSTFLAGS` variables to set additional flags for cargo commands
# and rustc, respectively. For instance, you can uncomment the cargoflags lines in the nightly
# channels to enable unstable features when building for nightly. Or you could add additional
# matrix entries to test different combinations of features.
environment:
  matrix:


### GNU Toolchains ###

  # Stable 64-bit GNU
    - channel: stable
      target: x86_64-pc-windows-gnu
      MSYS_BITS: 64
      OPENSSL_LIB_DIR: C:\OpenSSL-Win64\
      OPENSSL_INCLUDE_DIR: C:\OpenSSL-Win64\include
  # Stable 32-bit GNU
    - channel: stable
      target: i686-pc-windows-gnu
      MSYS_BITS: 32
      OPENSSL_LIB_DIR: C:\OpenSSL-Win32\
      OPENSSL_INCLUDE_DIR: C:\OpenSSL-Win32\include

### MSVC Toolchains ###

  # Stable 64-bit MSVC
    - channel: stable
      target: x86_64-pc-windows-msvc
      arch: Win64
      OPENSSL_DIR: C:\OpenSSL-v11-Win64
  # Stable 32-bit MSVC
    - channel: stable
      target: i686-pc-windows-msvc
      arch: Win32
      OPENSSL_DIR: C:\OpenSSL-v11-Win32

### Allowed failures ###

# See Appveyor documentation for specific details. In short, place any channel or targets you wish
# to allow build failures on (usually nightly at least is a wise choice). This will prevent a build
# or test failure in the matching channels/targets from failing the entire build.
matrix:
  allow_failures:
    - channel: nightly

# If you only care about stable channel build failures, uncomment the following line:
    #- channel: beta

## Install Script ##

# This is the most important part of the Appveyor configuration. This installs the version of Rust
# specified by the 'channel' and 'target' environment variables from the build matrix. This uses
# rustup to install Rust.
#
# For simple configurations, instead of using the build matrix, you can simply set the
# default-toolchain and default-host manually here.
install:
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init -yv --default-toolchain %channel% --default-host %target%
  - set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - rustc -vV
  - cargo -vV
  - if defined MSYS_BITS set PATH=C:\msys64\mingw%MSYS_BITS%\bin;C:\msys64\usr\bin;%PATH%

## Build Script ##

# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# the "directory does not contain a project or solution file" error.
build: false

# Uses 'cargo test' to run tests and build. Alternatively, the project may call compiled programs
#directly or perform other testing commands. Rust will automatically be placed in the PATH
# environment variable.
test_script:
- cargo test --verbose %cargoflags%


before_deploy:
  # Generate artifacts for release
  - cargo build --release
  - mkdir staging
  # TODO update this part to copy the artifacts that make sense for your project
  - copy target\release\rust_openssl.exe staging
  - if defined OPENSSL_DIR copy %OPENSSL_DIR%\bin\libcrypto*.dll staging
  - if defined OPENSSL_DIR copy %OPENSSL_DIR%\bin\libssl*.dll staging
  - if defined OPENSSL_DIR copy %OPENSSL_DIR%\bin\msvcr*.dll staging
  - if defined OPENSSL_LIB_DIR copy %OPENSSL_DIR%\bin\libeay*.dll staging
  - if defined OPENSSL_LIB_DIR copy %OPENSSL_DIR%\bin\ssleay*.dll staging
  - if defined OPENSSL_LIB_DIR copy %OPENSSL_DIR%\bin\msvcr*.dll staging
  - cd staging
    # release zipfile will look like 'rust-everywhere-v1.2.3-x86_64-pc-windows-msvc'
  - 7z a ../%APPVEYOR_PROJECT_NAME%-%APPVEYOR_REPO_COMMIT%-%TARGET%.zip *
  - appveyor PushArtifact ../%APPVEYOR_PROJECT_NAME%-%APPVEYOR_REPO_COMMIT%-%TARGET%.zip

deploy:
  description: 'Windows release'
  # All the zipped artifacts will be deployed
  artifact: /.*\.zip/
  # TODO Regenerate this auth_token for your project, this one won't work for you. Here's how:
  # - Go to 'https://github.com/settings/tokens/new' and generate a Token with only the
  # `public_repo` scope enabled
  # - Then go to 'https://ci.appveyor.com/tools/encrypt' and enter the newly generated token.
  # - Enter the "encrypted value" below
  auth_token:
    secure: WGHYzoz0qoV/HT30QYu3BHtqQBeXde+dE/g265Sj4cfUWChWVUVcRdRcfWovVo0z
  provider: GitHub
  # deploy when a new tag is pushed and only on the stable channel
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    # TODO you may want to pick a different channel
    CHANNEL: stable
branches:
  only:
    - master
skip_tags: true